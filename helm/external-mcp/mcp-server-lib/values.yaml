# MCP Server Library Chart
# 
# This library chart provides reusable templates for deploying MCP (Model Context Protocol) servers
# in Kubernetes. It supports three deployment modes:
#
# 1. stdio: Creates only ToolServer resource (for uvx/npx installation)
# 2. sse: Creates deployment, service, and ToolServer with Server-Sent Events
# 3. streamable-http: Creates deployment, service, and ToolServer with HTTP streaming
#
# Usage:
#   Add this chart as a dependency in your Chart.yaml:
#   dependencies:
#     - name: mcp-server-lib
#       version: "0.1.0"
#       repository: "file://../mcp-server-lib"
#
# Examples:
#
# 1. Stdio mode (uvx/npx):
#   serverType: "stdio"
#   stdio:
#     command: "npx"
#     args: ["@modelcontextprotocol/inspector"]
#
# 2. SSE mode:
#   serverType: "sse"
#   image:
#     repository: "my-mcp-server"
#     tag: "1.0.0"
#   config:
#     LOG_LEVEL: "info"
#
# 3. Streamable HTTP mode:
#   serverType: "streamable-http"
#   image:
#     repository: "my-mcp-server"
#     tag: "1.0.0"
#   secrets:
#     stringData:
#       API_KEY: "secret-key"

# -- MCP server deployment type
# @default -- "streamable-http"
# Valid values: "stdio", "sse", "streamable-http"
# - stdio: Only creates ToolServer resource (no deployment/service) for uvx/npx installation
# - sse: Creates deployment, service, and ToolServer with Server-Sent Events configuration
# - streamable-http: Creates deployment, service, and ToolServer with HTTP streaming configuration
serverType: "streamable-http"

# -- Description of the MCP server
# This appears in the ToolServer resource description field
description: "MCP server"

# Container image configuration (only used for sse/streamable-http modes)
image:
  # -- Container registry
  registry: docker.io
  # -- Container repository (required for sse/streamable-http modes)
  repository: ""
  # -- Container tag (defaults to chart version if not specified)
  tag: ""
  # -- Image pull policy
  pullPolicy: IfNotPresent

# -- Arguments for container (sse/streamable-http) or stdio command (stdio)
# For sse/streamable-http: passed to container command in deployment
# For stdio: passed as args to the stdio command in ToolServer
# Example: ["-t", "stdio"] or ["@modelcontextprotocol/inspector"]
args: []

# -- Number of replicas (only for sse/streamable-http modes)
replicaCount: 1

# -- Override the name of the chart
nameOverride: ""

# -- Override the full name of the resources
fullnameOverride: ""

# Service configuration (only created for sse/streamable-http modes)
service:
  # -- Service type
  type: ClusterIP
  # -- Service port
  port: 8080

# Service account configuration (only created for sse/streamable-http modes)
serviceAccount:
  # -- Create service account
  create: true
  # -- Automatically mount service account token
  automount: true
  # -- Service account annotations
  annotations: {}
  # -- Service account name (auto-generated if not specified)
  name: ""

# -- Security context for container
securityContext: {}

# -- Resource limits and requests
resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# HTTP configuration (only used for sse/streamable-http modes)
http:
  # -- HTTP server path (optional, appended to server URL)
  # Example: "/mcp" results in "http://service:port/mcp"
  path: ""
  
  # -- Static HTTP headers
  # These headers are sent with every HTTP request
  headers: {}
    # Example:
    # Content-Type: "application/json"
    # User-Agent: "mcp-client/1.0"
  
  # -- Additional headersFrom entries
  # These are added to the auto-generated headersFrom from config/secrets
  headersFrom: []
    # Example:
    # - name: "CUSTOM_HEADER"
    #   valueFrom:
    #     type: Secret
    #     valueRef: "my-secret"
    #     key: "header-value"
  
  # -- HTTP request timeout
  # Duration string (e.g., "30s", "5m")
  timeout: "30s"
  
  # -- Server-Sent Events read timeout
  # Duration string (e.g., "5m0s", "10m")
  sseReadTimeout: "5m0s"
  
  # -- Terminate connection on close (streamable-http only)
  # Set to true to close connection when client disconnects
  terminateOnClose: false

# Stdio configuration (only used for stdio mode)
stdio:
  # -- Command to run for stdio mode
  # Required for stdio mode. Examples: "uvx", "npx", "python"
  command: ""
  
  
  # -- Additional envFrom entries
  # These are added to the auto-generated envFrom from config/secrets
  envFrom: []
    # Example:
    # - name: "CUSTOM_ENV"
    #   valueFrom:
    #     type: ConfigMap
    #     valueRef: "my-config"
    #     key: "env-value"
  
  # -- Read timeout in seconds
  # How long to wait for stdio responses
  readTimeoutSeconds: 10

# -- Configuration data for ConfigMap
# Each key-value pair becomes an entry in the ConfigMap.
# These are automatically mapped to:
# - headersFrom for HTTP modes (sse/streamable-http)
# - envFrom for stdio mode
config: {}
  # Example:
  # LOG_LEVEL: "info"
  # PORT: "8080"
  # DEBUG: "false"
  # TRANSPORT_TYPE: "http"

# Secret data configuration
secrets:
  # -- Secret string data
  # Each key-value pair becomes an entry in the Secret.
  # These are automatically mapped to:
  # - headersFrom for HTTP modes (sse/streamable-http)
  # - envFrom for stdio mode
  stringData: {}
    # Example:
    # API_KEY: "your-secret-api-key"
    # DATABASE_URL: "postgres://user:pass@host:5432/db"
    # OPENAI_API_KEY: "sk-..."
    # ANTHROPIC_API_KEY: "sk-ant-..."

# Advanced configuration examples:
#
# Complete stdio example:
# serverType: "stdio"
# description: "Document Query MCP Server"
# stdio:
#   command: "uvx"
#   args: ["mcp-server-docs"]
# config:
#   LOG_LEVEL: "info"
# secrets:
#   stringData:
#     OPENAI_API_KEY: "sk-..."
#
# Complete SSE example:
# serverType: "sse"
# description: "Grafana MCP Server"
# image:
#   repository: "mcp/grafana"
#   tag: "latest"
# args: ["-t", "stdio"]
# service:
#   port: 8000
# config:
#   LOG_LEVEL: "info"
# secrets:
#   stringData:
#     GRAFANA_API_KEY: "glsa_..."
#     GRAFANA_URL: "https://grafana.example.com"
#
# Complete streamable-http example:
# serverType: "streamable-http"
# description: "Custom MCP Server"
# image:
#   repository: "my-org/mcp-server"
#   tag: "1.2.3"
# replicaCount: 2
# service:
#   port: 8080
# http:
#   path: "/mcp"
#   timeout: "60s"
#   terminateOnClose: true
# resources:
#   requests:
#     cpu: 100m
#     memory: 128Mi
#   limits:
#     cpu: 500m
#     memory: 512Mi
# config:
#   LOG_LEVEL: "debug"
#   METRICS_ENABLED: "true"
# secrets:
#   stringData:
#     DATABASE_URL: "postgres://..."
#     API_SECRET: "super-secret"